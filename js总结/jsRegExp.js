// 正则表达式
// 描述字符串规则的表达式
/pattern/attrs//斜杠＋规则＋斜杠＋属性(i为不区分大小写)
new RegExp(pattern,attrs)
// 测试指定字符串是否匹配正则表达式
var RegExp = /测试内容/i;
RegExp.text(str);
// text只需要所测试字符串中包含正则即可，前后多加内容也会true
// 锚点
^:起始位置 /^http/即字符串要以http起始
$:结尾位置 /\.jpg$/字符串要以.jpg结尾
\b:单词边界 /\bis\b/字符串里要出现完整的is单词
锚店可以结合使用
/^135903343$/，需要满足正则，还要以1开头，以3结尾
// 字符类
匹配一组字符中的一个
/[abc]/包涵3个字符中的一个就可以
/[^0-9]/:非0-9
/./ :任意字符，换行除外
/^1[0-9][0-9][0-9]$/:1开头，数字结尾，中间两个数字
位数也有要求
// 元字符，具有特殊意义的字符
锚店也是元字符
\d :[0-9]
\D :[^0-9]
\s :空白符
\S :非空白符[^\s]
\w :[A-Za-z0-9_]
也要放在正则里
// 量词
表示出现的次数
{m,n} :出现m到n次
* :{0,} 任意多次
? :{0,1}，仅对一个字符
+ :{1,}至少出现1次
{m} :出现m次
// 转义符
当需要匹配的字符是元字符时，用到转义符
/ :\/
. :\.
/
//多选分支
表示或的概念
/thi(c|n)k/ :thick或think
和/thi[cn]k/相同，字符类是特殊的多选分支
/^\.(png|jpg|gif)$/


// 捕获
// 保存匹配到的字符串，备用
() :捕获
匹配到括号里的内容，会被保存下匹配到的字符
(?:) :不捕获
使用：内容会保存在 $1,$2,...变量中或者使用api 

var arr = str.match(RegExp)获取正则匹配到的字符串
url中，取字符串，到/结尾：
[^\/]+
arr[]是一个字符串，保存捕获的字符串
arr[0] 是str本身

// str中replace方法
 str.replace(/(\d+)/,'$1.00')
 str.replace(/(\d+/,function(m));m传的就是捕获的值，return值会替换捕获的值
 $1:捕获的内容
 // 全局正则
 /(\d+)/g 全局模式
/i为不区分大小写
/
//regexpObj.exec(str)
更强大的检索能力
结果更详尽:index(保存的是正则本体的起始index)
过程状态:lastIndex(下一个匹配开始的位置)
用于循环中
while(result = reg.exec(str)){
	console.log(result);
	console.log(reg.lastIndex);
	reg.lastIndex += 10;//可修改
} 